version: '2.1'

volumes:
    prometheus_data: {}
    grafana_data: {}
    loki_data: {}

services:

  loki:
    container_name: loki
    image: grafana/loki:2.3.0
    ports:
      - "3100:3100"
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - default

  promtail:
    container_name: promtail
    image: grafana/promtail:2.3.0
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers
      - ./promtail/config.yml:/etc/promtail/config.yml
      - ./promtail/promtail-targets.yml:/etc/promtail/promtail-targets.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - default

  frisk:
    build:
      context: ./pocket
    image: frisk:latest
    container_name: frisk
    restart: unless-stopped
    expose:
      - 22225
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  prometheus:
    image: prom/prometheus:v2.25.2
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:v0.21.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v1.1.2
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro 
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:8.2.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning
    env_file:
      - grafana/config
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  pushgateway:
    image: prom/pushgateway:v1.4.0
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  caddy:
    image: caddy:2.3.0
    container_name: caddy
    ports:
      - "3001:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: unless-stopped
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"

  postgres:
    container_name: postgres
    image: bitnami/postgresql:13.4.0
    environment:
      - POSTGRES_USER=pguser
      - POSTGRES_PASSWORD=pgpassword
      - POSTGRES_DB=frisk
    ports:
      - 5432:5432
    restart: unless-stopped
    networks:
      - default
    volumes:
      - ./scripts/local.init.sql:/docker-entrypoint-initdb.d/init.sql
      - /data/frisk/postgres:/bitnami/postgresql

  influxdb:
    image: quay.io/influxdb/influxdb:v2.0.9
    container_name: influxdb
    volumes:
      - /data/frisk/influx:/root/.influxdbv2
    ports:
      - '8086:8086'
    restart: unless-stopped
    networks:
      - default

  influxdb_cli:
    links:
      - influxdb
    image: quay.io/influxdb/influxdb:v2.0.9
    container_name: influxdb_cli
    entrypoint: influx setup --bucket nodes -t -QVD3pKtY_ZBdfLZYxclSA6frrzMVEaPqLlNY93dQbFSkO6RLJ-HsbA8X22xwzTaEGSlRqgaZYCBIyUwOzd-QA== -o nachonodes --username=admin --password=2E5C8FpB8vJszOJZ9AOM --host=http://influxdb:8086 -f
    restart: on-failure:10
    depends_on:
      - influxdb
    networks:
      - default

  telegraf:
    image: telegraf
    container_name: telegraf
    links:
      - influxdb
    restart: unless-stopped
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    depends_on:
      - influxdb_cli
    networks:
      - default

networks:
  default:
    external: 
      name: nodes
